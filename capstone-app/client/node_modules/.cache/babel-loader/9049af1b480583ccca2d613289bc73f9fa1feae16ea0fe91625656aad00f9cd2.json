{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Projects\\\\QUT_IF717_webDevCapstone\\\\Project\\\\capstone-app\\\\client\\\\src\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n//Centralized State Management: Use instead of passing the setIsLoggedIn function down through multiple levels of components.\nimport React, { createContext, useState, useContext } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext); //give you the current value of AuthContext\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [isLoggedIn, setIsLoggedIn] = useState(localStorage.getItem(\"token\") ? true : false);\n  const [username, setUsername] = useState(localStorage.getItem('username') || '');\n\n  // Login function\n  const handleLogin = user => {\n    //localStorage.setItem(\"token\", token); // Save token to localStorage\n    localStorage.setItem(\"username\", user); // Save username to localStorage\n    setIsLoggedIn(true);\n    setUsername(user.username);\n  };\n\n  // Logout function\n  const handleLogout = () => {\n    localStorage.removeItem(\"token\"); // Remove token from localStorage\n    localStorage.removeItem(\"username\"); // Remove username from localStorage\n    setIsLoggedIn(false);\n    setUsername('');\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isLoggedIn,\n      username,\n      handleLogin,\n      handleLogout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n};\n_s2(AuthProvider, \"JrnZKQ8RRDCqHgIOkuz9f/U3sA4=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","isLoggedIn","setIsLoggedIn","localStorage","getItem","username","setUsername","handleLogin","user","setItem","handleLogout","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/User/Projects/QUT_IF717_webDevCapstone/Project/capstone-app/client/src/AuthContext.js"],"sourcesContent":["//Centralized State Management: Use instead of passing the setIsLoggedIn function down through multiple levels of components.\r\nimport React, { createContext, useState, useContext } from 'react';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n    const context = useContext(AuthContext); //give you the current value of AuthContext\r\n    if (!context) {\r\n        throw new Error('useAuth must be used within an AuthProvider');\r\n    }\r\n    return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n    const [isLoggedIn, setIsLoggedIn] = useState(\r\n        localStorage.getItem(\"token\") ? true : false\r\n    );\r\n    const [username, setUsername] = useState(localStorage.getItem('username') || '');\r\n\r\n\r\n     // Login function\r\n     const handleLogin = ( user) => {\r\n        //localStorage.setItem(\"token\", token); // Save token to localStorage\r\n        localStorage.setItem(\"username\", user); // Save username to localStorage\r\n        setIsLoggedIn(true);\r\n        setUsername(user.username);\r\n    };\r\n\r\n    // Logout function\r\n    const handleLogout = () => {\r\n        localStorage.removeItem(\"token\"); // Remove token from localStorage\r\n        localStorage.removeItem(\"username\"); // Remove username from localStorage\r\n        setIsLoggedIn(false);\r\n        setUsername('');\r\n    };   \r\n    \r\n    return (\r\n        <AuthContext.Provider value={{ isLoggedIn, username, handleLogin, handleLogout }}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};"],"mappings":";;;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnE,MAAMC,WAAW,gBAAGL,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMM,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAMC,OAAO,GAAGN,UAAU,CAACG,WAAW,CAAC,CAAC,CAAC;EACzC,IAAI,CAACG,OAAO,EAAE;IACV,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;EAClE;EACA,OAAOD,OAAO;AAClB,CAAC;AAACD,EAAA,CANWD,OAAO;AAQpB,OAAO,MAAMI,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC1C,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGb,QAAQ,CACxCc,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,GAAG,IAAI,GAAG,KAC3C,CAAC;EACD,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGjB,QAAQ,CAACc,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;;EAG/E;EACA,MAAMG,WAAW,GAAKC,IAAI,IAAK;IAC5B;IACAL,YAAY,CAACM,OAAO,CAAC,UAAU,EAAED,IAAI,CAAC,CAAC,CAAC;IACxCN,aAAa,CAAC,IAAI,CAAC;IACnBI,WAAW,CAACE,IAAI,CAACH,QAAQ,CAAC;EAC9B,CAAC;;EAED;EACA,MAAMK,YAAY,GAAGA,CAAA,KAAM;IACvBP,YAAY,CAACQ,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC;IAClCR,YAAY,CAACQ,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC;IACrCT,aAAa,CAAC,KAAK,CAAC;IACpBI,WAAW,CAAC,EAAE,CAAC;EACnB,CAAC;EAED,oBACId,OAAA,CAACC,WAAW,CAACmB,QAAQ;IAACC,KAAK,EAAE;MAAEZ,UAAU;MAAEI,QAAQ;MAAEE,WAAW;MAAEG;IAAa,CAAE;IAAAX,QAAA,EAC5EA;EAAQ;IAAAe,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAE/B,CAAC;AAACjB,GAAA,CA5BWF,YAAY;AAAAoB,EAAA,GAAZpB,YAAY;AAAA,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}