{"ast":null,"code":"const sanitizeData = data => {\n  return data.map(row => {\n    const sanitizedRow = {};\n    for (const key in row) {\n      sanitizedRow[key.trim()] = row[key]; // Trim each key\n    }\n    return sanitizedRow;\n  });\n};\nexport const filterDataByKeyValue = (data, key, value) => {\n  if (!data || !Array.isArray(data) || data.length === 0) {\n    console.log(\"Invalid or empty data provided.\");\n    return [];\n  }\n  console.log(`Filtering data for rows where ${key} is '${value}'`);\n  console.log(`Type of value: ${typeof value}`);\n  const filteredData = data.filter(row => {\n    if (key === 'year') {\n      // Check if row.date is present and valid\n      if (row.date) {\n        const rowYear = new Date(row.date).getFullYear();\n        console.log(`Row date: ${row.date}, extracted year: ${rowYear}`);\n        return rowYear === parseInt(value, 10); // Ensure we compare numbers\n      } else {\n        console.log(\"Row does not have a valid date:\", row);\n        return false;\n      }\n    } else {\n      // Regular filtering for other fields\n      return row[key] === value;\n    }\n  });\n  console.log(\"Filtered data:\", filteredData);\n  return filteredData;\n};","map":{"version":3,"names":["sanitizeData","data","map","row","sanitizedRow","key","trim","filterDataByKeyValue","value","Array","isArray","length","console","log","filteredData","filter","date","rowYear","Date","getFullYear","parseInt"],"sources":["C:/Users/User/Projects/QUT_IF717_webDevCapstone/Project/capstone-app/client/src/Components/Utils/dataProcessing.js"],"sourcesContent":["const sanitizeData = (data) => {\r\n    return data.map(row => {\r\n        const sanitizedRow = {};\r\n        for (const key in row) {\r\n            sanitizedRow[key.trim()] = row[key]; // Trim each key\r\n        }\r\n        return sanitizedRow;\r\n    });\r\n};\r\n\r\n\r\nexport const filterDataByKeyValue = (data, key, value) => {\r\n    if (!data || !Array.isArray(data) || data.length === 0) {\r\n        console.log(\"Invalid or empty data provided.\");\r\n        return [];\r\n    }\r\n\r\n    console.log(`Filtering data for rows where ${key} is '${value}'`);\r\n    console.log(`Type of value: ${typeof value}`);\r\n\r\n    \r\n    const filteredData = data.filter(row => {\r\n        if (key === 'year') {\r\n            // Check if row.date is present and valid\r\n            if (row.date) {\r\n                const rowYear = new Date(row.date).getFullYear();\r\n                console.log(`Row date: ${row.date}, extracted year: ${rowYear}`);\r\n                return rowYear === parseInt(value, 10); // Ensure we compare numbers\r\n            } else {\r\n                console.log(\"Row does not have a valid date:\", row);\r\n                return false;\r\n            }\r\n        } else {\r\n            // Regular filtering for other fields\r\n            return row[key] === value;\r\n        }\r\n    });\r\n\r\n    console.log(\"Filtered data:\", filteredData);\r\n    return filteredData;\r\n};"],"mappings":"AAAA,MAAMA,YAAY,GAAIC,IAAI,IAAK;EAC3B,OAAOA,IAAI,CAACC,GAAG,CAACC,GAAG,IAAI;IACnB,MAAMC,YAAY,GAAG,CAAC,CAAC;IACvB,KAAK,MAAMC,GAAG,IAAIF,GAAG,EAAE;MACnBC,YAAY,CAACC,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,GAAGH,GAAG,CAACE,GAAG,CAAC,CAAC,CAAC;IACzC;IACA,OAAOD,YAAY;EACvB,CAAC,CAAC;AACN,CAAC;AAGD,OAAO,MAAMG,oBAAoB,GAAGA,CAACN,IAAI,EAAEI,GAAG,EAAEG,KAAK,KAAK;EACtD,IAAI,CAACP,IAAI,IAAI,CAACQ,KAAK,CAACC,OAAO,CAACT,IAAI,CAAC,IAAIA,IAAI,CAACU,MAAM,KAAK,CAAC,EAAE;IACpDC,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;IAC9C,OAAO,EAAE;EACb;EAEAD,OAAO,CAACC,GAAG,CAAC,iCAAiCR,GAAG,QAAQG,KAAK,GAAG,CAAC;EACjEI,OAAO,CAACC,GAAG,CAAC,kBAAkB,OAAOL,KAAK,EAAE,CAAC;EAG7C,MAAMM,YAAY,GAAGb,IAAI,CAACc,MAAM,CAACZ,GAAG,IAAI;IACpC,IAAIE,GAAG,KAAK,MAAM,EAAE;MAChB;MACA,IAAIF,GAAG,CAACa,IAAI,EAAE;QACV,MAAMC,OAAO,GAAG,IAAIC,IAAI,CAACf,GAAG,CAACa,IAAI,CAAC,CAACG,WAAW,CAAC,CAAC;QAChDP,OAAO,CAACC,GAAG,CAAC,aAAaV,GAAG,CAACa,IAAI,qBAAqBC,OAAO,EAAE,CAAC;QAChE,OAAOA,OAAO,KAAKG,QAAQ,CAACZ,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC;MAC5C,CAAC,MAAM;QACHI,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAEV,GAAG,CAAC;QACnD,OAAO,KAAK;MAChB;IACJ,CAAC,MAAM;MACH;MACA,OAAOA,GAAG,CAACE,GAAG,CAAC,KAAKG,KAAK;IAC7B;EACJ,CAAC,CAAC;EAEFI,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEC,YAAY,CAAC;EAC3C,OAAOA,YAAY;AACvB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}