{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Projects\\\\QUT_IF717_webDevCapstone\\\\Project\\\\capstone-app\\\\client\\\\src\\\\Components\\\\Charts\\\\Occupancy.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport ReactDOM from 'react-dom/client';\nimport { AgCharts } from 'ag-charts-react';\nimport { useFetchOccupancyData } from \"../Hooks/useFetchOccupancyData\";\nimport { sanitizeData, filterDataByKeyValue } from \"../Utils/dataProcessing\";\nimport { useAuth } from \"../../AuthContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OccupancyChart = () => {\n  _s();\n  const {\n    userLocation\n  } = useAuth();\n  const rawData = useFetchOccupancyData();\n  const cleanData = sanitizeData(rawData);\n  const locationfilteredData = filterDataByKeyValue(cleanData, 'lga_name', userLocation);\n  // Filter data for 2023 and 2024\n  const year2024Data = filterDataByKeyValue(locationfilteredData, 'year', 2024);\n  const year2023Data = filterDataByKeyValue(locationfilteredData, 'year', 2023);\n\n  // Format the data to remove the year from the date component\n  const formatDailyData = data => {\n    return data.map(row => {\n      const date = new Date(row.date);\n      return {\n        // Create a new date object with the month and day, setting the year to a constant value\n        x: new Date(date.getFullYear(), date.getMonth(), date.getDate()),\n        // Keep day and month, ignore year\n        y: parseFloat(row.average_historical_occupancy)\n      };\n    });\n  };\n  const formatted2024Data = formatDailyData(year2024Data);\n  console.log;\n  const formatted2023Data = formatDailyData(year2023Data);\n  const chartOptions = {\n    title: {\n      text: `Occupancy Comparison for ${userLocation}`\n    },\n    data: [{\n      name: '2024',\n      data: formatted2024Data\n    }, {\n      name: '2023',\n      data: formatted2023Data\n    }],\n    series: [{\n      type: 'line',\n      xKey: 'x',\n      yKey: 'y',\n      title: '2024',\n      data: formatted2024Data\n    }, {\n      type: 'line',\n      xKey: 'x',\n      yKey: 'y',\n      title: '2023',\n      data: formatted2023Data\n    }],\n    axes: [{\n      type: 'time',\n      position: 'bottom',\n      label: {\n        format: '%b',\n        // Displays abbreviated month names (e.g., Jan, Feb)\n        rotation: 45 // Optional: Adjusts label rotation for readability\n      },\n      title: {\n        text: 'Month'\n      },\n      tick: {\n        interval: {\n          timeUnit: 'month',\n          count: 1\n        } // Tick every month\n      }\n    }, {\n      type: 'number',\n      position: 'left',\n      title: {\n        text: 'Average Historical Occupancy'\n      }\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '500px'\n    },\n    children: /*#__PURE__*/_jsxDEV(AgCharts, {\n      options: chartOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 9\n  }, this);\n};\n_s(OccupancyChart, \"mq3gBs+gXDTJiPmLA18yK0u/XGg=\", false, function () {\n  return [useAuth, useFetchOccupancyData];\n});\n_c = OccupancyChart;\nexport default OccupancyChart;\nvar _c;\n$RefreshReg$(_c, \"OccupancyChart\");","map":{"version":3,"names":["React","useEffect","useRef","ReactDOM","AgCharts","useFetchOccupancyData","sanitizeData","filterDataByKeyValue","useAuth","jsxDEV","_jsxDEV","OccupancyChart","_s","userLocation","rawData","cleanData","locationfilteredData","year2024Data","year2023Data","formatDailyData","data","map","row","date","Date","x","getFullYear","getMonth","getDate","y","parseFloat","average_historical_occupancy","formatted2024Data","console","log","formatted2023Data","chartOptions","title","text","name","series","type","xKey","yKey","axes","position","label","format","rotation","tick","interval","timeUnit","count","style","height","children","options","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/User/Projects/QUT_IF717_webDevCapstone/Project/capstone-app/client/src/Components/Charts/Occupancy.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\r\nimport ReactDOM from 'react-dom/client';\r\nimport { AgCharts } from 'ag-charts-react';\r\nimport { useFetchOccupancyData } from \"../Hooks/useFetchOccupancyData\";\r\nimport { sanitizeData, filterDataByKeyValue } from \"../Utils/dataProcessing\";\r\nimport { useAuth } from \"../../AuthContext\";\r\n\r\nconst OccupancyChart = () => {\r\n    const { \r\n        userLocation, \r\n     } = useAuth();\r\n\r\n    const rawData = useFetchOccupancyData();\r\n    const cleanData = sanitizeData(rawData)\r\n    const locationfilteredData = filterDataByKeyValue(cleanData, 'lga_name', userLocation);\r\n    // Filter data for 2023 and 2024\r\n    const year2024Data = filterDataByKeyValue(locationfilteredData, 'year', 2024);\r\n    const year2023Data = filterDataByKeyValue(locationfilteredData, 'year', 2023)\r\n\r\n    // Format the data to remove the year from the date component\r\n    const formatDailyData = (data) => {\r\n        return data.map(row => {\r\n            const date = new Date(row.date);\r\n            return {\r\n                // Create a new date object with the month and day, setting the year to a constant value\r\n                x: new Date(date.getFullYear(), date.getMonth(), date.getDate()), // Keep day and month, ignore year\r\n                y: parseFloat(row.average_historical_occupancy),\r\n            };\r\n        });\r\n    };\r\n\r\n    const formatted2024Data = formatDailyData(year2024Data);\r\n    console.log\r\n    const formatted2023Data = formatDailyData(year2023Data);\r\n\r\n    const chartOptions = {\r\n        title: {\r\n            text: `Occupancy Comparison for ${userLocation}`,\r\n        },\r\n        data: [\r\n            { name: '2024', data: formatted2024Data },\r\n            { name: '2023', data: formatted2023Data },\r\n        ],\r\n        series: [\r\n            {\r\n                type: 'line',\r\n                xKey: 'x',\r\n                yKey: 'y',\r\n                title: '2024',\r\n                data: formatted2024Data,\r\n            },\r\n            {\r\n                type: 'line',\r\n                xKey: 'x',\r\n                yKey: 'y',\r\n                title: '2023',\r\n                data: formatted2023Data,\r\n            },\r\n        ],\r\n        axes: [\r\n            {\r\n                type: 'time',\r\n                position: 'bottom',\r\n                label: {\r\n                    format: '%b', // Displays abbreviated month names (e.g., Jan, Feb)\r\n                    rotation: 45, // Optional: Adjusts label rotation for readability\r\n                },\r\n                title: {\r\n                    text: 'Month',\r\n                },\r\n                tick: {\r\n                    interval: { timeUnit: 'month', count: 1 }, // Tick every month\r\n                },\r\n            },\r\n            {\r\n                type: 'number',\r\n                position: 'left',\r\n                title: {\r\n                    text: 'Average Historical Occupancy',\r\n                },\r\n            },\r\n        ],\r\n    };\r\n\r\n    return (\r\n        <div style={{ height: '500px' }}>\r\n            <AgCharts options={chartOptions} /> \r\n        </div>\r\n    );\r\n\r\n\r\n};\r\n\r\nexport default OccupancyChart;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,SAASC,QAAQ,QAAQ,iBAAiB;AAC1C,SAASC,qBAAqB,QAAQ,gCAAgC;AACtE,SAASC,YAAY,EAAEC,oBAAoB,QAAQ,yBAAyB;AAC5E,SAASC,OAAO,QAAQ,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM;IACFC;EACH,CAAC,GAAGL,OAAO,CAAC,CAAC;EAEd,MAAMM,OAAO,GAAGT,qBAAqB,CAAC,CAAC;EACvC,MAAMU,SAAS,GAAGT,YAAY,CAACQ,OAAO,CAAC;EACvC,MAAME,oBAAoB,GAAGT,oBAAoB,CAACQ,SAAS,EAAE,UAAU,EAAEF,YAAY,CAAC;EACtF;EACA,MAAMI,YAAY,GAAGV,oBAAoB,CAACS,oBAAoB,EAAE,MAAM,EAAE,IAAI,CAAC;EAC7E,MAAME,YAAY,GAAGX,oBAAoB,CAACS,oBAAoB,EAAE,MAAM,EAAE,IAAI,CAAC;;EAE7E;EACA,MAAMG,eAAe,GAAIC,IAAI,IAAK;IAC9B,OAAOA,IAAI,CAACC,GAAG,CAACC,GAAG,IAAI;MACnB,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACF,GAAG,CAACC,IAAI,CAAC;MAC/B,OAAO;QACH;QACAE,CAAC,EAAE,IAAID,IAAI,CAACD,IAAI,CAACG,WAAW,CAAC,CAAC,EAAEH,IAAI,CAACI,QAAQ,CAAC,CAAC,EAAEJ,IAAI,CAACK,OAAO,CAAC,CAAC,CAAC;QAAE;QAClEC,CAAC,EAAEC,UAAU,CAACR,GAAG,CAACS,4BAA4B;MAClD,CAAC;IACL,CAAC,CAAC;EACN,CAAC;EAED,MAAMC,iBAAiB,GAAGb,eAAe,CAACF,YAAY,CAAC;EACvDgB,OAAO,CAACC,GAAG;EACX,MAAMC,iBAAiB,GAAGhB,eAAe,CAACD,YAAY,CAAC;EAEvD,MAAMkB,YAAY,GAAG;IACjBC,KAAK,EAAE;MACHC,IAAI,EAAE,4BAA4BzB,YAAY;IAClD,CAAC;IACDO,IAAI,EAAE,CACF;MAAEmB,IAAI,EAAE,MAAM;MAAEnB,IAAI,EAAEY;IAAkB,CAAC,EACzC;MAAEO,IAAI,EAAE,MAAM;MAAEnB,IAAI,EAAEe;IAAkB,CAAC,CAC5C;IACDK,MAAM,EAAE,CACJ;MACIC,IAAI,EAAE,MAAM;MACZC,IAAI,EAAE,GAAG;MACTC,IAAI,EAAE,GAAG;MACTN,KAAK,EAAE,MAAM;MACbjB,IAAI,EAAEY;IACV,CAAC,EACD;MACIS,IAAI,EAAE,MAAM;MACZC,IAAI,EAAE,GAAG;MACTC,IAAI,EAAE,GAAG;MACTN,KAAK,EAAE,MAAM;MACbjB,IAAI,EAAEe;IACV,CAAC,CACJ;IACDS,IAAI,EAAE,CACF;MACIH,IAAI,EAAE,MAAM;MACZI,QAAQ,EAAE,QAAQ;MAClBC,KAAK,EAAE;QACHC,MAAM,EAAE,IAAI;QAAE;QACdC,QAAQ,EAAE,EAAE,CAAE;MAClB,CAAC;MACDX,KAAK,EAAE;QACHC,IAAI,EAAE;MACV,CAAC;MACDW,IAAI,EAAE;QACFC,QAAQ,EAAE;UAAEC,QAAQ,EAAE,OAAO;UAAEC,KAAK,EAAE;QAAE,CAAC,CAAE;MAC/C;IACJ,CAAC,EACD;MACIX,IAAI,EAAE,QAAQ;MACdI,QAAQ,EAAE,MAAM;MAChBR,KAAK,EAAE;QACHC,IAAI,EAAE;MACV;IACJ,CAAC;EAET,CAAC;EAED,oBACI5B,OAAA;IAAK2C,KAAK,EAAE;MAAEC,MAAM,EAAE;IAAQ,CAAE;IAAAC,QAAA,eAC5B7C,OAAA,CAACN,QAAQ;MAACoD,OAAO,EAAEpB;IAAa;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAClC,CAAC;AAId,CAAC;AAAChD,EAAA,CApFID,cAAc;EAAA,QAGXH,OAAO,EAEIH,qBAAqB;AAAA;AAAAwD,EAAA,GALnClD,cAAc;AAsFpB,eAAeA,cAAc;AAAC,IAAAkD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}